/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */

import java.util.*;

public class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected Grammar parser;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(Grammar p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return GrammarTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }
  
  
  private static boolean WItoBoolean(WI_Value wi, HashMap<String, WI_Value> st) {
	  if (wi.getWiType() == WI_Value.WI_BOOL) {
		  if (wi.getValue().equals("true")) return true;
		  else return false;
	  }
	  else if (wi.getWiType() == WI_Value.WI_NUMBER) {
		  if (wi.getValue().equals("0")) return false;
		  else return true;
	  }
	  else if (wi.getWiType() == WI_Value.WI_NAME) {
		  WI_Value tmp = st.get(wi.getValue());
		  if (tmp.getWiType() == WI_Value.WI_BOOL) {
			  if (tmp.getValue().equals("true")) return true;
			  else return false;
		  }
		  else if (tmp.getWiType() == WI_Value.WI_NUMBER) {
			  if (tmp.getValue().equals("0")) return false;
			  else return true;
		  }
	  }
	  // TODO maybe handle STRING
	  return false;
  }
  
  private static double WItoDouble(WI_Value wi, HashMap<String, WI_Value> st) {
	  if (wi.getWiType() == WI_Value.WI_NUMBER) {
		  return Double.parseDouble(wi.getValue());
	  }
	  else if (wi.getWiType() == WI_Value.WI_BOOL) {
		  boolean tmp = SimpleNode.WItoBoolean(wi, st);
		  if (tmp) return 1;
		  else return 0;
	  }
	  else if (wi.getWiType() == WI_Value.WI_NAME) {
		  WI_Value st_val = st.get(wi.getValue());
		  if (st_val.getWiType() == WI_Value.WI_NUMBER) {
			  return Double.parseDouble(st_val.getValue());
		  }
		  else if (st_val.getWiType() == WI_Value.WI_BOOL) {
			  boolean tmp = SimpleNode.WItoBoolean(st_val, st);
			  if (tmp) return 1;
			  else return 0;
		  }
	  }
	  // TODO maybe handle STRING
	  return 0;
  }
  
  public String AtomValue;
  public String AtomType;
  public String CompOp;
  public String ShiftOp;
  public String AddOp;
  public String MulOp;
  public String SignOp = "-1";
  public String AugassignOp;
  
  public int getId() { return this.id; }
  public String getCompOp() { return this.CompOp; }
  public String getAugassignOp() { return this.AugassignOp; }
  
  public WI_Value evaluate(HashMap<String, WI_Value> st) throws ParseException {
	  if (this.id == GrammarTreeConstants.JJTTESTLISTSTAREXPR) {
		  // TODO implement multiple assignment
		  return this.jjtGetChild(0).evaluate(st);
	  }
	  else if (this.id == GrammarTreeConstants.JJTTESTLIST) {
		  // TODO implement multiple assignment
		  return this.jjtGetChild(0).evaluate(st);
	  }
	  else if (this.id == GrammarTreeConstants.JJTTEST) {
		  if (this.jjtGetNumChildren() == 1) {
			  return this.jjtGetChild(0).evaluate(st);
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTORTEST) {
		  if (this.jjtGetNumChildren() > 1) {
			  boolean ret = false;
			  for (int i = 0 ; i < this.jjtGetNumChildren(); i++) {
				  ret |= SimpleNode.WItoBoolean(this.jjtGetChild(i).evaluate(st), st);
			  }
			  if (ret) {
				  return new WI_Value("true", WI_Value.WI_BOOL);
			  }
			  else {
				  return new WI_Value("false", WI_Value.WI_BOOL);
			  }
		  }
		  else {
			  return this.jjtGetChild(0).evaluate(st);
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTXORTEST) {
		  if (this.jjtGetNumChildren() > 1) {
			  WI_Value first = this.jjtGetChild(0).evaluate(st);
			  boolean ret = SimpleNode.WItoBoolean(first, st);
			  for (int i = 1; i < this.jjtGetNumChildren(); i++) {
				  ret ^= SimpleNode.WItoBoolean(this.jjtGetChild(i).evaluate(st), st);
			  }
			  if (ret) {
				  return new WI_Value("true", WI_Value.WI_BOOL);
			  }
			  else {
				  return new WI_Value("false", WI_Value.WI_BOOL);
			  }
		  }
		  else {
			  return this.jjtGetChild(0).evaluate(st);
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTANDTEST) {
		  if (this.jjtGetNumChildren() > 1) {
			  boolean ret = true;
			  for (int i = 0 ; i < this.jjtGetNumChildren(); i++) {
				  ret &= SimpleNode.WItoBoolean(this.jjtGetChild(i).evaluate(st), st);
			  }
			  if (ret) {
				  return new WI_Value("true", WI_Value.WI_BOOL);
			  }
			  else {
				  return new WI_Value("false", WI_Value.WI_BOOL);
			  }
		  }
		  else {
			  return this.jjtGetChild(0).evaluate(st);
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTNOTTEST) {
		  if (this.jjtGetChild(0).getId() == GrammarTreeConstants.JJTNOTTEST) {
			  boolean ret = !SimpleNode.WItoBoolean(this.jjtGetChild(0).evaluate(st), st);
		  
			  if (!ret) {
				  return new WI_Value("false", WI_Value.WI_BOOL);
			  }
			  else {
				  return new WI_Value("true", WI_Value.WI_BOOL);
			  }
		  }
		  else {
			  return this.jjtGetChild(0).evaluate(st);
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTCOMPARISON) {
		  // TODO implement String comaprison
		  if (this.jjtGetNumChildren() > 1) {
			  double lastVal = SimpleNode.WItoDouble(this.jjtGetChild(0).evaluateExpr(st), st);
			  for (int i = 1; i < this.jjtGetNumChildren(); i++) {
				  if (this.jjtGetChild(i).getId() == GrammarTreeConstants.JJTCOMPOP) {
					  if (this.jjtGetChild(i).getCompOp().equals(">")) {
						  if (lastVal <= SimpleNode.WItoDouble(this.jjtGetChild(i+1).evaluateExpr(st), st))
							  return new WI_Value("false", WI_Value.WI_BOOL);
					  }
					  else if (this.jjtGetChild(i).getCompOp().equals("<")) {
						  if (lastVal >= SimpleNode.WItoDouble(this.jjtGetChild(i+1).evaluateExpr(st), st))
							  return new WI_Value("false", WI_Value.WI_BOOL);
					  }
					  else if (this.jjtGetChild(i).getCompOp().equals("==")) {
						  if (lastVal != SimpleNode.WItoDouble(this.jjtGetChild(i+1).evaluateExpr(st), st))
							  return new WI_Value("false", WI_Value.WI_BOOL);
					  }
					  else if (this.jjtGetChild(i).getCompOp().equals(">=")) {
						  if (lastVal < SimpleNode.WItoDouble(this.jjtGetChild(i+1).evaluateExpr(st), st))
							  return new WI_Value("false", WI_Value.WI_BOOL);
					  }
					  else if (this.jjtGetChild(i).getCompOp().equals("<=")) {
						  if (lastVal > SimpleNode.WItoDouble(this.jjtGetChild(i+1).evaluateExpr(st), st))
							  return new WI_Value("false", WI_Value.WI_BOOL);
					  }
					  else if (this.jjtGetChild(i).getCompOp().equals("!=")) {
						  if (lastVal == SimpleNode.WItoDouble(this.jjtGetChild(i+1).evaluateExpr(st), st))
							  return new WI_Value("false", WI_Value.WI_BOOL);
					  }
				  }
				  else {
					  lastVal = SimpleNode.WItoDouble(this.jjtGetChild(i).evaluateExpr(st), st);
				  }
			  }
		  }
		  else {
			  return this.jjtGetChild(0).evaluateExpr(st);
		  }
	  }
	  
	  return new WI_Value("true", WI_Value.WI_BOOL);
  }
  
  public WI_Value evaluateExpr(HashMap<String, WI_Value> st) throws ParseException {
	  if (this.id == GrammarTreeConstants.JJTEXPR) {
		  if (this.jjtGetNumChildren() > 1) {
			  int ret = (int) SimpleNode.WItoDouble(this.jjtGetChild(0).evaluateExpr(st), st);
			  for (int i = 1; i < this.jjtGetNumChildren(); i++) {
				  ret = ret | (int) SimpleNode.WItoDouble(this.jjtGetChild(i).evaluateExpr(st), st);
			  }
			  return new WI_Value(Integer.toString(ret), WI_Value.WI_NUMBER);
		  }
		  else {
			  return this.jjtGetChild(0).evaluateExpr(st);
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTXOREXPR) {
		  if (this.jjtGetNumChildren() > 1) {
			  int ret = (int) SimpleNode.WItoDouble(this.jjtGetChild(0).evaluateExpr(st), st);
			  for (int i = 1; i < this.jjtGetNumChildren(); i++) {
				  ret = ret ^ (int) SimpleNode.WItoDouble(this.jjtGetChild(i).evaluateExpr(st), st);
			  }
			  return new WI_Value(Integer.toString(ret), WI_Value.WI_NUMBER);
		  }
		  else {
			  return this.jjtGetChild(0).evaluateExpr(st);
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTANDEXPR) {
		  if (this.jjtGetNumChildren() > 1) {
			  int ret = (int) SimpleNode.WItoDouble(this.jjtGetChild(0).evaluateExpr(st), st);
			  for (int i = 1; i < this.jjtGetNumChildren(); i++) {
				  ret = ret & (int) SimpleNode.WItoDouble(this.jjtGetChild(i).evaluateExpr(st), st);
			  }
			  return new WI_Value(Integer.toString(ret), WI_Value.WI_NUMBER);
		  }
		  else {
			  return this.jjtGetChild(0).evaluateExpr(st);
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTSHIFTEXPR) {
		  if (this.jjtGetNumChildren() > 1) {
			  int ret = (int) SimpleNode.WItoDouble(this.jjtGetChild(0).evaluateExpr(st), st);
			  for (int i = 1; i < this.jjtGetNumChildren(); i++) {
				  if (this.ShiftOp.equals(">>")) {
					  ret >>= (int) SimpleNode.WItoDouble(this.jjtGetChild(i).evaluateExpr(st), st);
				  }
				  else if (this.ShiftOp.equals("<<")) {
					  ret <<= (int) SimpleNode.WItoDouble(this.jjtGetChild(i).evaluateExpr(st), st);
				  }
			  }
			  return new WI_Value(Integer.toString(ret), WI_Value.WI_NUMBER);
		  }
		  else {
			  return this.jjtGetChild(0).evaluateExpr(st);
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTARITHEXPR) {
		  if (this.jjtGetNumChildren() > 1) {
			  double ret = SimpleNode.WItoDouble(this.jjtGetChild(0).evaluateExpr(st), st);
			  for (int i = 1; i < this.jjtGetNumChildren(); i++) {
				  if (this.AddOp.equals("+")) {
					  ret += SimpleNode.WItoDouble(this.jjtGetChild(i).evaluateExpr(st), st);
				  }
				  else if (this.AddOp.equals("-")) {
					  ret -= SimpleNode.WItoDouble(this.jjtGetChild(i).evaluateExpr(st), st);
				  }
			  }
			  return new WI_Value(Double.toString(ret), WI_Value.WI_NUMBER);
		  }
		  else {
			  return this.jjtGetChild(0).evaluateExpr(st);
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTTERM) {
		  if (this.jjtGetNumChildren() > 1) {
			  double ret = SimpleNode.WItoDouble(this.jjtGetChild(0).evaluateExpr(st), st);
			  for (int i = 1; i < this.jjtGetNumChildren(); i++) {
				  if (this.MulOp.equals("*")) {
					  ret *= SimpleNode.WItoDouble(this.jjtGetChild(i).evaluateExpr(st), st);
				  }
				  else if (this.MulOp.equals("/")) {
					  ret /= SimpleNode.WItoDouble(this.jjtGetChild(i).evaluateExpr(st), st);
				  }
				  else if (this.MulOp.equals("%")) {
					  ret %= SimpleNode.WItoDouble(this.jjtGetChild(i).evaluateExpr(st), st);
				  }
				  else if (this.MulOp.equals("//")) {
					  ret /= SimpleNode.WItoDouble(this.jjtGetChild(i).evaluateExpr(st), st);
					  ret = (int) ret;
				  }
			  }
			  return new WI_Value(Double.toString(ret), WI_Value.WI_NUMBER);
		  }
		  else {
			  return this.jjtGetChild(0).evaluateExpr(st);
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTFACTOR) {
		  if (this.jjtGetNumChildren() > 1) {
			  double ret = SimpleNode.WItoDouble(this.jjtGetChild(0).evaluateExpr(st), st);
			  if (this.SignOp != null) {
				  if (this.SignOp.equals("+"));
				  else if (this.SignOp.equals("-")) {
					  ret *= -1;
				  }
				  else if (this.SignOp.equals("~")) {
					  ret = ~(int)ret;
				  }
				  return new WI_Value(Double.toString(ret), WI_Value.WI_NUMBER);
			  }
			  return new WI_Value(Double.toString(ret), WI_Value.WI_NUMBER);
		  }
		  else {
			  return this.jjtGetChild(0).evaluateExpr(st);
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTPOWER) {
		  if (this.jjtGetNumChildren() > 1) {
			  double ret = SimpleNode.WItoDouble(this.jjtGetChild(0).evaluateExpr(st), st);
			  if (this.jjtGetNumChildren() > 1) {
				  ret = Math.pow(ret, SimpleNode.WItoDouble(this.jjtGetChild(1).evaluateExpr(st), st));
			  }
			  return new WI_Value(Double.toString(ret), WI_Value.WI_NUMBER);
		  }
		  else {
			  return this.jjtGetChild(0).evaluateExpr(st);
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTATOMEXPR) {
		  //double ret = this.jjtGetChild(0).evaluateExpr().EvalDouble();
		  // TODO implement rest of ATOMEXPR
		  //return new WI_Value(Double.toString(ret), WI_Value.WI_NUMBER);
		  return this.jjtGetChild(0).evaluateExpr(st);
	  }
	  else if (this.id == GrammarTreeConstants.JJTATOM) {
		  return this.jjtGetChild(0).evaluateExpr(st);
		  // TODO implement rest of ATOM
	  }
	  else if (this.id == GrammarTreeConstants.JJTNUMBER) {
		  return new WI_Value(this.AtomValue, WI_Value.WI_NUMBER);
	  }
	  else if (this.id == GrammarTreeConstants.JJTNAME) {
		  return new WI_Value(this.AtomValue, WI_Value.WI_NAME);
	  }
	  else if (this.id == GrammarTreeConstants.JJTSTRING) {
		  StringBuffer sb = new StringBuffer();
		  for (int i = 1; i < this.AtomValue.length() - 1; i++) {
			  sb.append(this.AtomValue.charAt(i));
		  }
		  return new WI_Value(sb.toString(), WI_Value.WI_STRING);
	  }
	  return new WI_Value(Integer.toString(0), WI_Value.WI_NUMBER);
  }
  
  public void interpret(HashMap<String, WI_Value> symbolTable) throws ParseException {
	  //System.out.println(GrammarTreeConstants.jjtNodeName[this.id]);
	  
	  if (this.id == GrammarTreeConstants.JJTINPUT) {
		  for (int i = 0; i < this.jjtGetNumChildren(); i++) {
			  this.jjtGetChild(i).interpret(symbolTable);
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTSIMPLESTMT) {
		  for (int i = 0; i < this.jjtGetNumChildren(); i++) {
			  this.jjtGetChild(i).interpret(symbolTable);
		  }
	  }
	  
	  else if (this.id == GrammarTreeConstants.JJTASSERTSTMT) {
		  for (int i = 0; i < this.jjtGetNumChildren(); i++) {
			  if ((SimpleNode.WItoBoolean(this.jjtGetChild(i).evaluate(symbolTable), symbolTable)) == false) {
				  System.out.println("error");
				  //return;
			  }
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTEXPRSTMT) {
		  // TODO yield not implemented
		  // TODO Annassign not implemented
		  if (this.jjtGetNumChildren() == 2) {
			  WI_Value left = this.jjtGetChild(0).evaluate(symbolTable);
			  WI_Value right = this.jjtGetChild(1).evaluate(symbolTable);
			  
			  if (left.getWiType() == WI_Value.WI_NAME) {
				  if (right.getWiType() == WI_Value.WI_NUMBER) {
					  WI_Value insert = new WI_Value(Double.toString(Double.parseDouble(right.getValue())), right.getWiType());
					  symbolTable.put(left.getValue(), insert);
				  }
				  else {
					  symbolTable.put(left.getValue(), right);
				  }
			  }
			  // TODO symbol table assign
		  }
		  else if (this.jjtGetNumChildren() == 3) {
			  WI_Value left = this.jjtGetChild(0).evaluate(symbolTable);
			  WI_Value right = this.jjtGetChild(2).evaluate(symbolTable);
			  
			  if (left.getWiType() == WI_Value.WI_NAME) {
				  if (!symbolTable.containsKey(left.getValue())) {
					  System.out.println("ERROR!\nNO SUCH KEY " + left.getValue());
					  return;
					  // TODO re-do error checking and handling
				  }
				  
				  
				  // TODO error handling
				  Node child2 = this.jjtGetChild(1);
				  if (child2.getAugassignOp().equals("+=")) {
					  if (symbolTable.get(left.getValue()).getWiType() == WI_Value.WI_NUMBER && right.getWiType() == WI_Value.WI_NUMBER) {
						  double oldVal = Double.parseDouble(symbolTable.get(left.getValue()).getValue());
						  double add = Double.parseDouble(right.getValue());
						  WI_Value newVal = new WI_Value(Double.toString(oldVal+add), WI_Value.WI_NUMBER);
						  symbolTable.put(left.getValue(), newVal);
					  }
					  else if (symbolTable.get(left.getValue()).getWiType() == WI_Value.WI_STRING && right.getWiType() == WI_Value.WI_STRING) {
						  symbolTable.put(left.getValue(), new WI_Value(symbolTable.get(left.getValue()).getValue() + right.getValue(), WI_Value.WI_STRING));
					  }
				  }
				  else if (child2.getAugassignOp().equals("-=")) {
					  if (symbolTable.get(left.getValue()).getWiType() == WI_Value.WI_NUMBER && right.getWiType() == WI_Value.WI_NUMBER) {
						  double oldVal = Double.parseDouble(symbolTable.get(left.getValue()).getValue());
						  double sub = Double.parseDouble(right.getValue());
						  WI_Value newVal = new WI_Value(Double.toString(oldVal-sub), WI_Value.WI_NUMBER);
						  symbolTable.put(left.getValue(), newVal);
					  }
				  }
				  else if (child2.getAugassignOp().equals("*=")) {
					  if (symbolTable.get(left.getValue()).getWiType() == WI_Value.WI_NUMBER && right.getWiType() == WI_Value.WI_NUMBER) {
						  double oldVal = Double.parseDouble(symbolTable.get(left.getValue()).getValue());
						  double mul = Double.parseDouble(right.getValue());
						  WI_Value newVal = new WI_Value(Double.toString(oldVal*mul), WI_Value.WI_NUMBER);
						  symbolTable.put(left.getValue(), newVal);
					  }
				  }
				  else if (child2.getAugassignOp().equals("/=")) {
					  if (symbolTable.get(left.getValue()).getWiType() == WI_Value.WI_NUMBER && right.getWiType() == WI_Value.WI_NUMBER) {
						  double oldVal = Double.parseDouble(symbolTable.get(left.getValue()).getValue());
						  double div = Double.parseDouble(right.getValue());
						  WI_Value newVal = new WI_Value(Double.toString(oldVal/div), WI_Value.WI_NUMBER);
						  symbolTable.put(left.getValue(), newVal);
					  }
				  }
				  else if (child2.getAugassignOp().equals("%=")) {
					  if (symbolTable.get(left.getValue()).getWiType() == WI_Value.WI_NUMBER && right.getWiType() == WI_Value.WI_NUMBER) {
						  double oldVal = Double.parseDouble(symbolTable.get(left.getValue()).getValue());
						  double mod = Double.parseDouble(right.getValue());
						  WI_Value newVal = new WI_Value(Double.toString(oldVal%mod), WI_Value.WI_NUMBER);
						  symbolTable.put(left.getValue(), newVal);
					  }
				  }
				  else if (child2.getAugassignOp().equals("&=")) {
					  if (symbolTable.get(left.getValue()).getWiType() == WI_Value.WI_NUMBER && right.getWiType() == WI_Value.WI_NUMBER) {
						  int oldVal = (int) Double.parseDouble(symbolTable.get(left.getValue()).getValue());
						  int and = (int) Double.parseDouble(right.getValue());
						  WI_Value newVal = new WI_Value(Double.toString(oldVal&and), WI_Value.WI_NUMBER);
						  symbolTable.put(left.getValue(), newVal);
					  }
				  }
				  else if (child2.getAugassignOp().equals("|=")) {
					  if (symbolTable.get(left.getValue()).getWiType() == WI_Value.WI_NUMBER && right.getWiType() == WI_Value.WI_NUMBER) {
						  int oldVal = (int) Double.parseDouble(symbolTable.get(left.getValue()).getValue());
						  int or = (int) Double.parseDouble(right.getValue());
						  WI_Value newVal = new WI_Value(Double.toString(oldVal|or), WI_Value.WI_NUMBER);
						  symbolTable.put(left.getValue(), newVal);
					  }
				  }
				  else if (child2.getAugassignOp().equals("^=")) {
					  if (symbolTable.get(left.getValue()).getWiType() == WI_Value.WI_NUMBER && right.getWiType() == WI_Value.WI_NUMBER) {
						  int oldVal = (int) Double.parseDouble(symbolTable.get(left.getValue()).getValue());
						  int xor = (int) Double.parseDouble(right.getValue());
						  WI_Value newVal = new WI_Value(Double.toString(oldVal^xor), WI_Value.WI_NUMBER);
						  symbolTable.put(left.getValue(), newVal);
					  }
				  }
				  else if (child2.getAugassignOp().equals(">>=")) {
					  if (symbolTable.get(left.getValue()).getWiType() == WI_Value.WI_NUMBER && right.getWiType() == WI_Value.WI_NUMBER) {
						  int oldVal = (int) Double.parseDouble(symbolTable.get(left.getValue()).getValue());
						  int shr = (int) Double.parseDouble(right.getValue());
						  WI_Value newVal = new WI_Value(Double.toString(oldVal>>shr), WI_Value.WI_NUMBER);
						  symbolTable.put(left.getValue(), newVal);
					  }
				  }
				  else if (child2.getAugassignOp().equals("<<=")) {
					  if (symbolTable.get(left.getValue()).getWiType() == WI_Value.WI_NUMBER && right.getWiType() == WI_Value.WI_NUMBER) {
						  int oldVal = (int) Double.parseDouble(symbolTable.get(left.getValue()).getValue());
						  int shl = (int) Double.parseDouble(right.getValue());
						  WI_Value newVal = new WI_Value(Double.toString(oldVal<<shl), WI_Value.WI_NUMBER);
						  symbolTable.put(left.getValue(), newVal);
					  }
				  }
				  else if (child2.getAugassignOp().equals("**=")) {
					  if (symbolTable.get(left.getValue()).getWiType() == WI_Value.WI_NUMBER && right.getWiType() == WI_Value.WI_NUMBER) {
						  double oldVal = Double.parseDouble(symbolTable.get(left.getValue()).getValue());
						  double pow = Double.parseDouble(right.getValue());
						  WI_Value newVal = new WI_Value(Double.toString(Math.pow(oldVal, pow)), WI_Value.WI_NUMBER);
						  symbolTable.put(left.getValue(), newVal);
					  }
				  }
				  else if (child2.getAugassignOp().equals("//=")) {
					  if (symbolTable.get(left.getValue()).getWiType() == WI_Value.WI_NUMBER && right.getWiType() == WI_Value.WI_NUMBER) {
						  double oldVal = Double.parseDouble(symbolTable.get(left.getValue()).getValue());
						  double and = Double.parseDouble(right.getValue());
						  WI_Value newVal = new WI_Value(Double.toString((int)(oldVal/and)), WI_Value.WI_NUMBER);
						  symbolTable.put(left.getValue(), newVal);
					  }
				  }
			  }
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTTESTLISTSTAREXPR) {
		  System.out.println("testliststarexpr");
	  }
	  else if (this.id == GrammarTreeConstants.JJTYIELDEXPR) {
		  System.out.println("yieldexpr");
	  }
	  else if (this.id == GrammarTreeConstants.JJTTESTLIST) {
		  System.out.println("tstlist");
	  }
	  else if (this.id == GrammarTreeConstants.JJTCOMPOUNDSTMT) {
		  for (int i = 0; i < this.jjtGetNumChildren(); i++) {
			  this.jjtGetChild(i).interpret(symbolTable);
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTIFSTMT) {
		  boolean entered = false;
		  for (int i = 0; i < this.jjtGetNumChildren(); i+=2) {
			  if (SimpleNode.WItoBoolean(this.jjtGetChild(i).evaluate(symbolTable), symbolTable)) {
				  entered = true;
				  this.jjtGetChild(i+1).interpret(symbolTable);
				  break;
			  }
		  }
		  if (this.jjtGetNumChildren() % 2 == 1 && !entered) {
			  this.jjtGetChild(this.jjtGetNumChildren() - 1).interpret(symbolTable);
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTWHILESTMT) {
		  while(SimpleNode.WItoBoolean(this.jjtGetChild(0).evaluate(symbolTable), symbolTable)) {
			  this.jjtGetChild(1).interpret(symbolTable);
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTDOSTMT) {
		  do {
			  this.jjtGetChild(0).interpret(symbolTable);
		  } while (SimpleNode.WItoBoolean(this.jjtGetChild(1).evaluate(symbolTable), symbolTable));
	  }
	  else if (this.id == GrammarTreeConstants.JJTSUITE) {
		  for (int i = 0; i < this.jjtGetNumChildren(); i++) {
			  this.jjtGetChild(i).interpret(symbolTable);
		  }
	  }
	  for(Map.Entry m:symbolTable.entrySet()){  
		  System.out.println(m.getKey()+" "+((WI_Value)m.getValue()).getValue());  
	  }
  }
}

/* JavaCC - OriginalChecksum=ba01956f9461fbac24d4a42943ee0547 (do not edit this line) */
