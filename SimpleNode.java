/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected Grammar parser;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(Grammar p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return GrammarTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }
  
  
  public String AtomValue;
  public String AtomType;
  public String CompOp;
  public String ShiftOp;
  public String AddOp;
  public String MulOp;
  public String SignOp = "-1";
  public String AugassignOp;
  
  public int getId() { return this.id; }
  public String getCompOp() { return this.CompOp; }
  
  public WI_Value evaluate() throws ParseException {
	  if (this.id == GrammarTreeConstants.JJTTESTLISTSTAREXPR) {
		  // TODO implement multiple assignment
		  return this.jjtGetChild(0).evaluate();
	  }
	  else if (this.id == GrammarTreeConstants.JJTTEST) {
		  if (this.jjtGetNumChildren() == 1) {
			  return this.jjtGetChild(0).evaluate();
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTORTEST) {
		  if (this.jjtGetNumChildren() > 1) {
			  boolean tmp = false;
			  for (int i = 0 ; i < this.jjtGetNumChildren(); i++) {
				  tmp |= this.jjtGetChild(i).evaluate().EvalBool();
			  }
			  if (tmp) {
				  return new WI_Value("true", WI_Value.WI_BOOL);
			  }
			  else {
				  return new WI_Value("false", WI_Value.WI_BOOL);
			  }
		  }
		  else {
			  return this.jjtGetChild(0).evaluate();
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTXORTEST) {
		  if (this.jjtGetNumChildren() > 1) {
			  boolean tmp = this.jjtGetChild(0).evaluate().EvalBool();
			  for (int i = 1; i < this.jjtGetNumChildren(); i++) {
				  tmp ^= this.jjtGetChild(i).evaluate().EvalBool();
			  }
			  if (tmp) {
				  return new WI_Value("true", WI_Value.WI_BOOL);
			  }
			  else {
				  return new WI_Value("false", WI_Value.WI_BOOL);
			  }
		  }
		  else {
			  return this.jjtGetChild(0).evaluate();
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTANDTEST) {
		  if (this.jjtGetNumChildren() > 1) {
			  boolean tmp = true;
			  for (int i = 0 ; i < this.jjtGetNumChildren(); i++) {
				  tmp &= this.jjtGetChild(i).evaluate().EvalBool();
			  }
			  if (tmp) {
				  return new WI_Value("true", WI_Value.WI_BOOL);
			  }
			  else {
				  return new WI_Value("false", WI_Value.WI_BOOL);
			  }
		  }
		  else {
			  return this.jjtGetChild(0).evaluate();
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTNOTTEST) {
		  if (this.jjtGetChild(0).getId() == GrammarTreeConstants.JJTNOTTEST) {
			  boolean tmp = !this.jjtGetChild(0).evaluate().EvalBool();
		  
			  if (!tmp) {
				  return new WI_Value("false", WI_Value.WI_BOOL);
			  }
			  else {
				  return new WI_Value("true", WI_Value.WI_BOOL);
			  }
		  }
		  else {
			  return this.jjtGetChild(0).evaluate();
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTCOMPARISON) {
		  double lastVal = this.jjtGetChild(0).evaluateExpr().EvalDouble();
		  for (int i = 1; i < this.jjtGetNumChildren(); i++) {
			  if (this.jjtGetChild(i).getId() == GrammarTreeConstants.JJTCOMPOP) {
				  if (this.jjtGetChild(i).getCompOp().equals(">")) {
					  if (lastVal <= this.jjtGetChild(i+1).evaluateExpr().EvalDouble())
						  return new WI_Value("false", WI_Value.WI_BOOL);
				  }
				  else if (this.jjtGetChild(i).getCompOp().equals("<")) {
					  if (lastVal >= this.jjtGetChild(i+1).evaluateExpr().EvalDouble())
						  return new WI_Value("false", WI_Value.WI_BOOL);
				  }
				  else if (this.jjtGetChild(i).getCompOp().equals("==")) {
					  if (lastVal != this.jjtGetChild(i+1).evaluateExpr().EvalDouble())
						  return new WI_Value("false", WI_Value.WI_BOOL);
				  }
				  else if (this.jjtGetChild(i).getCompOp().equals(">=")) {
					  if (lastVal < this.jjtGetChild(i+1).evaluateExpr().EvalDouble())
						  return new WI_Value("false", WI_Value.WI_BOOL);
				  }
				  else if (this.jjtGetChild(i).getCompOp().equals("<=")) {
					  if (lastVal > this.jjtGetChild(i+1).evaluateExpr().EvalDouble())
						  return new WI_Value("false", WI_Value.WI_BOOL);
				  }
				  else if (this.jjtGetChild(i).getCompOp().equals("!=")) {
					  if (lastVal == this.jjtGetChild(i+1).evaluateExpr().EvalDouble())
						  return new WI_Value("false", WI_Value.WI_BOOL);
				  }
			  }
			  else {
				  lastVal = this.jjtGetChild(i).evaluateExpr().EvalDouble();
			  }
		  }
	  }
	  
	  return new WI_Value("true", WI_Value.WI_BOOL);
  }
  
  public WI_Value evaluateExpr() throws ParseException {
	  if (this.id == GrammarTreeConstants.JJTEXPR) {
		  if (this.jjtGetNumChildren() > 1) {
			  int ret = (int) this.jjtGetChild(0).evaluateExpr().EvalDouble();
			  for (int i = 1; i < this.jjtGetNumChildren(); i++) {
				  ret = ret | (int) this.jjtGetChild(i).evaluateExpr().EvalDouble();
			  }
			  return new WI_Value(Integer.toString(ret), WI_Value.WI_NUMBER);
		  }
		  else {
			  return this.jjtGetChild(0).evaluateExpr();
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTXOREXPR) {
		  if (this.jjtGetNumChildren() > 1) {
			  int ret = (int) this.jjtGetChild(0).evaluateExpr().EvalDouble();
			  for (int i = 1; i < this.jjtGetNumChildren(); i++) {
				  ret = ret ^ (int) this.jjtGetChild(i).evaluateExpr().EvalDouble();
			  }
			  return new WI_Value(Integer.toString(ret), WI_Value.WI_NUMBER);
		  }
		  else {
			  return this.jjtGetChild(0).evaluateExpr();
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTANDEXPR) {
		  if (this.jjtGetNumChildren() > 1) {
			  int ret = (int) this.jjtGetChild(0).evaluateExpr().EvalDouble();
			  for (int i = 1; i < this.jjtGetNumChildren(); i++) {
				  ret = ret & (int) this.jjtGetChild(i).evaluateExpr().EvalDouble();
			  }
			  return new WI_Value(Integer.toString(ret), WI_Value.WI_NUMBER);
		  }
		  else {
			  return this.jjtGetChild(0).evaluateExpr();
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTSHIFTEXPR) {
		  if (this.jjtGetNumChildren() > 1) {
			  int ret = (int) this.jjtGetChild(0).evaluateExpr().EvalDouble();
			  for (int i = 1; i < this.jjtGetNumChildren(); i++) {
				  if (this.ShiftOp.equals(">>")) {
					  ret >>= (int) this.jjtGetChild(i).evaluateExpr().EvalDouble();
				  }
				  else if (this.ShiftOp.equals("<<")) {
					  ret <<= (int) this.jjtGetChild(i).evaluateExpr().EvalDouble();
				  }
			  }
			  return new WI_Value(Integer.toString(ret), WI_Value.WI_NUMBER);
		  }
		  else {
			  return this.jjtGetChild(0).evaluateExpr();
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTARITHEXPR) {
		  double ret = this.jjtGetChild(0).evaluateExpr().EvalDouble();
		  for (int i = 1; i < this.jjtGetNumChildren(); i++) {
			  if (this.AddOp.equals("+")) {
				  ret += this.jjtGetChild(i).evaluateExpr().EvalDouble();
			  }
			  else if (this.AddOp.equals("-")) {
				  ret -= this.jjtGetChild(i).evaluateExpr().EvalDouble();
			  }
		  }
		  return new WI_Value(Double.toString(ret), WI_Value.WI_NUMBER);
	  }
	  else if (this.id == GrammarTreeConstants.JJTTERM) {
		  double ret = this.jjtGetChild(0).evaluateExpr().EvalDouble();
		  for (int i = 1; i < this.jjtGetNumChildren(); i++) {
			  if (this.MulOp.equals("*")) {
				  ret *= this.jjtGetChild(i).evaluateExpr().EvalDouble();
			  }
			  else if (this.MulOp.equals("/")) {
				  ret /= this.jjtGetChild(i).evaluateExpr().EvalDouble();
			  }
			  else if (this.MulOp.equals("%")) {
				  ret %= this.jjtGetChild(i).evaluateExpr().EvalDouble();
			  }
			  else if (this.MulOp.equals("//")) {
				  ret /= this.jjtGetChild(i).evaluateExpr().EvalDouble();
				  ret = (int) ret;
			  }
		  }
		  return new WI_Value(Double.toString(ret), WI_Value.WI_NUMBER);
	  }
	  else if (this.id == GrammarTreeConstants.JJTFACTOR) {
		  double ret = this.jjtGetChild(0).evaluateExpr().EvalDouble();
		  if (this.SignOp != null) {
			  if (this.SignOp.equals("+"));
			  else if (this.SignOp.equals("-")) {
				  ret *= -1;
			  }
			  else if (this.SignOp.equals("~")) {
				  ret = ~(int)ret;
			  }
			  return new WI_Value(Double.toString(ret), WI_Value.WI_NUMBER);
		  }
		  return new WI_Value(Double.toString(ret), WI_Value.WI_NUMBER);
	  }
	  else if (this.id == GrammarTreeConstants.JJTPOWER) {
		  double ret = this.jjtGetChild(0).evaluateExpr().EvalDouble();
		  if (this.jjtGetNumChildren() > 1) {
			  ret = Math.pow(ret, this.jjtGetChild(1).evaluateExpr().EvalDouble());
		  }
		  return new WI_Value(Double.toString(ret), WI_Value.WI_NUMBER);
	  }
	  else if (this.id == GrammarTreeConstants.JJTATOMEXPR) {
		  double ret = this.jjtGetChild(0).evaluateExpr().EvalDouble();
		  // TODO implement rest of ATOMEXPR
		  return new WI_Value(Double.toString(ret), WI_Value.WI_NUMBER);
	  }
	  else if (this.id == GrammarTreeConstants.JJTATOM) {
		  return this.jjtGetChild(0).evaluateExpr();
		  // TODO implement rest of ATOM
	  }
	  else if (this.id == GrammarTreeConstants.JJTNUMBER) {
		  double ret = Double.parseDouble(this.AtomValue);
		  return new WI_Value(Double.toString(ret), WI_Value.WI_NUMBER);
	  }
	  else if (this.id == GrammarTreeConstants.JJTNAME) {
		  return new WI_Value(this.AtomValue, WI_Value.WI_NAME);
	  }
	  else if (this.id == GrammarTreeConstants.JJTSTRING) {
		  //evaluateString();
	  }
	  return new WI_Value(Integer.toString(0), WI_Value.WI_NUMBER);
  }
  
  public void interpret() throws ParseException {
	  //System.out.println(GrammarTreeConstants.jjtNodeName[this.id]);
	  if (this.id == GrammarTreeConstants.JJTINPUT) {
		  for (int i = 0; i < this.jjtGetNumChildren(); i++) {
			  this.jjtGetChild(i).interpret();
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTSIMPLESTMT) {
		  for (int i = 0; i < this.jjtGetNumChildren(); i++) {
			  this.jjtGetChild(i).interpret();
		  }
	  }
	  
	  else if (this.id == GrammarTreeConstants.JJTASSERTSTMT) {
		  for (int i = 0; i < this.jjtGetNumChildren(); i++) {
			  if ((this.jjtGetChild(i).evaluate().EvalBool()) == false) {
				  System.out.println("error");
				  //return;
			  }
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTEXPRSTMT) {
		  if (this.jjtGetNumChildren() == 2) {
			  WI_Value left = this.jjtGetChild(0).evaluate();
			  WI_Value right = this.jjtGetChild(1).evaluate();
			  // TODO symbol table assign
		  }
		  else if (this.jjtGetNumChildren() == 3) {
			  WI_Value left = this.jjtGetChild(0).evaluate();
			  WI_Value right = this.jjtGetChild(2).evaluate();
			  // TODO symbol table update with help of child #2
		  }
	  }
	  else if (this.id == GrammarTreeConstants.JJTTESTLISTSTAREXPR) {
		  System.out.println("testliststarexpr");
	  }
	  else if (this.id == GrammarTreeConstants.JJTYIELDEXPR) {
		  System.out.println("yieldexpr");
	  }
	  else if (this.id == GrammarTreeConstants.JJTTESTLIST) {
		  System.out.println("tstlist");
	  }
  }
}

/* JavaCC - OriginalChecksum=ba01956f9461fbac24d4a42943ee0547 (do not edit this line) */
