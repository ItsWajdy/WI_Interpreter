/* Generated By:JJTree&JavaCC: Do not edit this line. GrammarTokenManager.java */
import java.io.FileInputStream;
import java.io.FileNotFoundException;

/** Token Manager. */
public class GrammarTokenManager implements GrammarConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x8000L) != 0L)
            return 0;
         if ((active0 & 0xfffff00000e00000L) != 0L || (active1 & 0x7fffL) != 0L)
         {
            jjmatchedKind = 90;
            return 8;
         }
         return -1;
      case 1:
         if ((active0 & 0x4021800000a00000L) != 0L || (active1 & 0x3L) != 0L)
            return 8;
         if ((active1 & 0x8000L) != 0L)
            return 1;
         if ((active0 & 0xbfde700000400000L) != 0L || (active1 & 0x7ffcL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 1;
            }
            return 8;
         }
         return -1;
      case 2:
         if ((active0 & 0x800200000400000L) != 0L || (active1 & 0x2400L) != 0L)
            return 8;
         if ((active0 & 0xb7df500000000000L) != 0L || (active1 & 0x5bfdL) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 2;
            return 8;
         }
         return -1;
      case 3:
         if ((active0 & 0x10c0400000000000L) != 0L || (active1 & 0x1300L) != 0L)
            return 8;
         if ((active0 & 0xa71f100000000000L) != 0L || (active1 & 0x48fdL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 3;
            }
            return 8;
         }
         return -1;
      case 4:
         if ((active0 & 0xa699100000000000L) != 0L || (active1 & 0xddL) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 4;
            return 8;
         }
         if ((active0 & 0x106000000000000L) != 0L || (active1 & 0x4820L) != 0L)
            return 8;
         return -1;
      case 5:
         if ((active0 & 0x608100000000000L) != 0L || (active1 & 0xdL) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
            return 8;
         }
         if ((active0 & 0xa091000000000000L) != 0L || (active1 & 0xd0L) != 0L)
            return 8;
         return -1;
      case 6:
         if ((active0 & 0x8100000000000L) != 0L || (active1 & 0x9L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 6;
            return 8;
         }
         if ((active0 & 0x600000000000000L) != 0L || (active1 & 0x4L) != 0L)
            return 8;
         return -1;
      case 7:
         if ((active1 & 0x9L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 7;
            return 8;
         }
         if ((active0 & 0x8100000000000L) != 0L)
            return 8;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 37:
         jjmatchedKind = 9;
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 38:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 82);
      case 41:
         return jjStopAtPos(0, 83);
      case 42:
         jjmatchedKind = 6;
         return jjMoveStringLiteralDfa1_0(0x404000800L, 0x0L);
      case 43:
         jjmatchedKind = 4;
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 40);
      case 45:
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x2000000L);
      case 46:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 47:
         jjmatchedKind = 7;
         return jjMoveStringLiteralDfa1_0(0x808001000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 36);
      case 59:
         return jjStopAtPos(0, 37);
      case 60:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x100082000L, 0x0L);
      case 61:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_0(0x80000020000L, 0x0L);
      case 62:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x200044000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 87);
      case 93:
         return jjStopAtPos(0, 88);
      case 94:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1f00000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xc000000000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x30000000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc0000000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1f00000000000000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xc000000000a00000L, 0x1L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1cL);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x60L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x700L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 123:
         return jjStopAtPos(0, 41);
      case 124:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 42);
      case 126:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 47:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 60:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 61:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      case 62:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2100000000000000L, active1, 0x20L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0x40L);
      case 102:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 62, 8);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x900L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0x5000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0xc4000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0x1L);
      case 111:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 53, 8);
         return jjMoveStringLiteralDfa2_0(active0, 0xc08000000400000L, active1, 0x2000L);
      case 114:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(1, 65, 8);
         return jjMoveStringLiteralDfa2_0(active0, 0x1002400000000000L, active1, 0x60cL);
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 23, 8);
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L);
      case 126:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(2, 38);
         break;
      case 61:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 32);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(2, 33);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 34);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(2, 35);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x80L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 8);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0x4000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x924L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x500000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2208000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x8L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 8);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 8);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xc1100000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 8);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1041L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L);
      case 121:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 74, 8);
         break;
      case 126:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(2, 79);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x202000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x81000000000000L, active1, 0x1L);
      case 104:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 8);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x4810L);
      case 109:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 8);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 8);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x104000000000000L, active1, 0x20L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x8100000000000L, active1, 0x88L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L);
      case 100:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 8);
         break;
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 8);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 8);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x88000000000000L, active1, 0x90L);
      case 107:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 8);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2200000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8001100000000000L, active1, 0x41L);
      case 115:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0L);
      case 99:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 8);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L);
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 8);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 8);
         break;
      case 102:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 8);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 8);
         break;
      case 115:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 8);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L);
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 51, 8);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 67, 8);
         break;
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 64, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 26;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 10)
                     kind = 10;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddStates(0, 5);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 93)
                        kind = 93;
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(14, 15);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(11, 12);
                  else if (curChar == 36)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(8);
                  }
                  break;
               case 1:
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 7:
                  if (curChar != 36)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if ((0x2400L & l) != 0L && kind > 91)
                     kind = 91;
                  break;
               case 10:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar == 34 && kind > 92)
                     kind = 92;
                  break;
               case 13:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 39 && kind > 92)
                     kind = 92;
                  break;
               case 16:
                  if (curChar == 48 && kind > 93)
                     kind = 93;
                  break;
               case 17:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAddStates(0, 5);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar == 46)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAdd(20);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 46)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xbfffffffffffffffL & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  else if (curChar == 126)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(8);
                  }
                  else if (curChar == 126)
                     jjstateSet[jjnewStateCnt++] = 6;
                  if (curChar == 126)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 1:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 5:
                  if (curChar == 126)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0xbfffffffffffffffL & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 7:
               case 8:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(8);
                  break;
               case 11:
                  jjAddStates(6, 7);
                  break;
               case 14:
                  jjAddStates(8, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 1:
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(6, 7);
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(8, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 26 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 126:
         return jjMoveStringLiteralDfa1_1(0x10000L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_1(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 126:
         return jjMoveStringLiteralDfa2_1(active1, 0x10000L);
      default :
         return 2;
   }
}
static private int jjMoveStringLiteralDfa2_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 126:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(2, 80);
         break;
      default :
         return 3;
   }
   return 3;
}
static final int[] jjnextStates = {
   18, 19, 21, 22, 23, 24, 11, 12, 14, 15, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\53", "\55", "\52", "\57", "\75", "\45", null, 
"\52\52", "\57\57", "\74\74", "\76\76", "\76", "\74", "\75\75", "\76\75", "\74\75", 
"\41\75", "\151\156", "\156\157\164", "\151\163", "\53\75", "\55\75", "\52\75", 
"\57\75", "\45\75", "\46\75", "\174\75", "\136\75", "\74\74\75", "\76\76\75", 
"\52\52\75", "\57\57\75", "\72", "\73", "\56\56\56", "\56", "\54", "\173", "\175", 
"\75\76", "\141\142\163\164\162\141\143\164", "\141\156\144", "\141\162\147\163", 
"\141\163", "\141\163\163\145\162\164", "\142\162\145\141\153", "\143\154\141\163\163", 
"\143\157\156\164\151\156\165\145", "\144\145\146\151\156\145", "\144\157", "\145\154\163\145", 
"\145\154\163\145\151\146", "\146\141\154\163\145", "\146\151\156\141\154\154\171", 
"\146\157\154\154\157\167\163", "\146\157\162", "\146\162\157\155", "\150\141\156\144\154\145", "\151\146", 
"\151\155\160\157\162\164", "\151\156\164\145\162\146\141\143\145", "\157\162", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\162\141\151\163\145", "\162\145\164\165\162\156", "\163\164\141\164\151\143", "\164\150\151\163", 
"\164\162\165\145", "\164\162\171", "\167\150\151\154\145", "\167\151\164\150", "\170\157\162", 
"\171\151\145\154\144", null, null, null, "\50", "\51", "\174", "\136", "\46", "\133", "\135", 
"\55\76", null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WithinComment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffff1L, 0xfffc7fffL, 
};
static final long[] jjtoSkip = {
   0xeL, 0x18000L, 
};
static final long[] jjtoSpecial = {
   0x8L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x20000L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[26];
static private final int[] jjstateSet = new int[52];
static protected char curChar;
/** Constructor. */
public GrammarTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public GrammarTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 26; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 81)
         {
            jjmatchedKind = 81;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
