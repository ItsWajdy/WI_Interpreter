/* Generated By:JJTree&JavaCC: Do not edit this line. GrammarConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 3;
  /** RegularExpression Id. */
  int PLUS = 4;
  /** RegularExpression Id. */
  int MINUS = 5;
  /** RegularExpression Id. */
  int MULTIPLY = 6;
  /** RegularExpression Id. */
  int DIVIDE = 7;
  /** RegularExpression Id. */
  int ASSIGN = 8;
  /** RegularExpression Id. */
  int MOD = 9;
  /** RegularExpression Id. */
  int TILDE = 10;
  /** RegularExpression Id. */
  int POWER = 11;
  /** RegularExpression Id. */
  int DIVIDEINT = 12;
  /** RegularExpression Id. */
  int SHIFTLEFT = 13;
  /** RegularExpression Id. */
  int SHIFTRIGHT = 14;
  /** RegularExpression Id. */
  int GREATER = 15;
  /** RegularExpression Id. */
  int LESS = 16;
  /** RegularExpression Id. */
  int EQUALS = 17;
  /** RegularExpression Id. */
  int GREATEREQ = 18;
  /** RegularExpression Id. */
  int LESSEQ = 19;
  /** RegularExpression Id. */
  int NOTEQ = 20;
  /** RegularExpression Id. */
  int IN = 21;
  /** RegularExpression Id. */
  int NOT = 22;
  /** RegularExpression Id. */
  int IS = 23;
  /** RegularExpression Id. */
  int PLUSEQ = 24;
  /** RegularExpression Id. */
  int MINUSEQ = 25;
  /** RegularExpression Id. */
  int MULTIPLYEQ = 26;
  /** RegularExpression Id. */
  int DIVIDEEQ = 27;
  /** RegularExpression Id. */
  int MODEQ = 28;
  /** RegularExpression Id. */
  int ANDEQ = 29;
  /** RegularExpression Id. */
  int OREQ = 30;
  /** RegularExpression Id. */
  int XOREQ = 31;
  /** RegularExpression Id. */
  int SHIFTLEFTEQ = 32;
  /** RegularExpression Id. */
  int SHIFTRIGHTEQ = 33;
  /** RegularExpression Id. */
  int POWEREQ = 34;
  /** RegularExpression Id. */
  int DIVIDEINTEQ = 35;
  /** RegularExpression Id. */
  int COLON = 36;
  /** RegularExpression Id. */
  int SEMICOLON = 37;
  /** RegularExpression Id. */
  int ELLIPSES = 38;
  /** RegularExpression Id. */
  int DOT = 39;
  /** RegularExpression Id. */
  int COMMA = 40;
  /** RegularExpression Id. */
  int OPENBRACE = 41;
  /** RegularExpression Id. */
  int CLOSEBRACE = 42;
  /** RegularExpression Id. */
  int LAMBDA = 43;
  /** RegularExpression Id. */
  int NAME = 89;
  /** RegularExpression Id. */
  int NEWLINE = 90;
  /** RegularExpression Id. */
  int STRING = 91;
  /** RegularExpression Id. */
  int NUMBER = 92;
  /** RegularExpression Id. */
  int INT = 93;
  /** RegularExpression Id. */
  int FLOAT = 94;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int WithinComment = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"\\t\"",
    "\" \"",
    "<SINGLE_LINE_COMMENT>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"%\"",
    "<TILDE>",
    "\"**\"",
    "\"//\"",
    "\"<<\"",
    "\">>\"",
    "\">\"",
    "\"<\"",
    "\"==\"",
    "\">=\"",
    "\"<=\"",
    "\"!=\"",
    "\"in\"",
    "\"not\"",
    "\"is\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"**=\"",
    "\"//=\"",
    "\":\"",
    "\";\"",
    "\"...\"",
    "\".\"",
    "\",\"",
    "\"{\"",
    "\"}\"",
    "\"=>\"",
    "\"~~~\"",
    "\"~~~\"",
    "<token of kind 46>",
    "\"break\"",
    "\"continue\"",
    "\"return\"",
    "\"yield\"",
    "\"from\"",
    "\"raise\"",
    "\"import\"",
    "\"(\"",
    "\")\"",
    "\"as\"",
    "\"assert\"",
    "\"class\"",
    "\"interface\"",
    "\"if\"",
    "\"elseif\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"for\"",
    "\"try\"",
    "\"finally\"",
    "\"handle\"",
    "\"with\"",
    "\"or\"",
    "\"xor\"",
    "\"and\"",
    "\"|\"",
    "\"^\"",
    "\"&\"",
    "\"[\"",
    "\"]\"",
    "\"true\"",
    "\"false\"",
    "\"args\"",
    "\"define\"",
    "\"->\"",
    "\"follows\"",
    "\"public\"",
    "\"private\"",
    "\"protected\"",
    "\"static\"",
    "\"abstract\"",
    "<NAME>",
    "<NEWLINE>",
    "<STRING>",
    "<NUMBER>",
    "<INT>",
    "<FLOAT>",
  };

}
