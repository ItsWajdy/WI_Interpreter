/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(Grammar)
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.*;
public class Grammar{  public static void main(String args []) throws FileNotFoundException  {    Grammar parser = new Grammar(new FileInputStream("my_tests.txt"));
    HashMap<String, WI_Value > symbolTable = new HashMap<String, WI_Value >();
    try { 
   		SimpleNode root = parser.Input();
   		root.interpret(symbolTable);
   		//root.dump("  ");
  	} catch (ParseException e) {
  	  	System.out.println("Oops!");
  	  	e.printStackTrace();
  	}  }}PARSER_END(Grammar)SKIP :
{
  "\t"
| " "
}

SPECIAL_TOKEN :
{
  < SINGLE_LINE_COMMENT: "~~" (~["~"]) (~["\n", "\r"])* (["\n", "\r"]) >
}

TOKEN :
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
| < MOD : "%" >
| < TILDE : "~" (~["~"])>
| < POWER : "**" >
| < DIVIDEINT : "//" >
| < SHIFTLEFT : "<<" >
| < SHIFTRIGHT : ">>" >
| < GREATER : ">" >
| < LESS : "<" >
| < EQUALS : "==" >
| < GREATEREQ : ">=" >
| < LESSEQ : "<=" >
| < NOTEQ : "!=" >
| < IN : "in" >
| < NOT : "not" >
| < IS : "is" >
}

TOKEN :
{
  < PLUSEQ : "+=" >
| < MINUSEQ : "-=" >
| < MULTIPLYEQ : "*=" >
| < DIVIDEEQ : "/=" >
| < MODEQ : "%=" >
| < ANDEQ : "&=" >
| < OREQ : "|=" >
| < XOREQ : "^=" >
| < SHIFTLEFTEQ : "<<=" >
| < SHIFTRIGHTEQ : ">>=" >
| < POWEREQ : "**=" >
| < DIVIDEINTEQ : "//=" >
}

TOKEN :
{
  < COLON : ":" >
| < SEMICOLON : ";" >
| < ELLIPSES : "..." >
| < DOT : "." >
| < COMMA : "," >
}


TOKEN :
{
  < OPENBRACE : "{" >
| < CLOSEBRACE : "}" >
}

TOKEN :
{
  < LAMBDA : "=>" >
}

TOKEN :
{
  < ABSTRACT : "abstract" >
| < AND : "and" >
| < ARGS : "args" >
| < AS : "as" >
| < ASSERT : "assert" >
| < BREAK : "break" >
| < CLASS : "class" >
| < CONTINUE : "continue" >
| < DEFINE : "define" >
| < DO : "do" >
| < ELSE : "else" >
| < ELSEIF : "elseif" >
| < FALSE : "false" >
| < FINALLY : "finally" >
| < FOLLOWS : "follows" >
| < FOR : "for" >
| < FROM : "from" >
| < HANDLE : "handle" >
| < IF : "if" >
| < IMPORT : "import" >
| < INTERFACE : "interface" >
| < OR : "or" >
| < PRIVATE : "private" >
| < PROTECTED : "protected" >
| < PUBLIC : "public" >
| < RAISE : "raise" >
| < RETURN : "return" >
| < STATIC : "static" >
| < THIS : "this" >
| < TRUE : "true" >
| < TRY : "try" >
| < WHILE : "while" >
| < WITH : "with" >
| < XOR : "xor" >
| < YIELD : "yield" >
}

SKIP :
{
  "~~~" : WithinComment
}

<WithinComment> SKIP :
{
  "~~~" : DEFAULT
}

<WithinComment> MORE :
{
  <~[]>
}


SimpleNode Input() :
{}
{
  (Stmt())*
  { return jjtThis; }
}

void Stmt() #void :
{}
{
  LOOKAHEAD(2) CompoundStmt()
| SimpleStmt()
| Newline()
}

void Newline() #void :
{}
{
  < NEWLINE >
}

void SimpleStmt() :
{}
{
  SmallStmt() (< SEMICOLON > SmallStmt())*
}


void SmallStmt() #void :
{}
{
  FlowStmt() < NEWLINE >
| ImportStmt() < NEWLINE >
| AssertStmt() < NEWLINE >
| ExprStmt() < NEWLINE >
}

void ExprStmt() :
{}
{
  TestlistStarExpr()  (Annassign()
              		| (Augassign()  (YieldExpr() | Testlist()))
                    | (< ASSIGN >   (YieldExpr() | TestlistStarExpr()))*)
}

void Annassign() :
{}
{
  < COLON> Test() [< ASSIGN > Test()]
}

void TestlistStarExpr() :
{}
{
  (Test() | StarExpr()) (< COMMA > (Test() | StarExpr()))*
}

void Augassign() :
{ Token t; }
{
(  t=< PLUSEQ >
| t=< MINUSEQ >
| t=< MULTIPLYEQ >
| t=< DIVIDEEQ >
| t=< MODEQ >
| t=< ANDEQ >
| t=< OREQ >
| t=< XOREQ >
| t=< SHIFTRIGHTEQ >
| t=< SHIFTLEFTEQ >
| t=< POWEREQ >
| t=< DIVIDEINTEQ >
)
{
  jjtThis.AugassignOp = t.image;
}
}

void FlowStmt() :
{}
{
  BreakStmt()
| ContinueStmt()
| ReturnStmt()
| RaiseStmt()
| YieldStmt()
}

void BreakStmt() :
{}
{
  < BREAK >
}

void ContinueStmt() :
{}
{
  < CONTINUE >
}

void ReturnStmt() :
{}
{
  < RETURN > [LOOKAHEAD(2) Testlist()]
}

void YieldStmt() :
{}
{
  YieldExpr()
}

void YieldExpr() :
{}
{
  < YIELD > [LOOKAHEAD(2) YieldArg()]
}

void YieldArg() :
{}
{
  < FROM > Test() | Testlist()
}

void RaiseStmt() :
{}
{
  < RAISE > [LOOKAHEAD(2) Test() [LOOKAHEAD(2) < FROM > Test()]]
}

void ImportStmt() :
{}
{
  ImportName() | ImportFrom()
}

void ImportName() :
{}
{
  < IMPORT > DottedAsNames()
}

void ImportFrom() :
{}
{
  (< FROM > (LOOKAHEAD(2) (< DOT > | < ELLIPSES >)* DottedName() | (< DOT > | < ELLIPSES >)+) < IMPORT > ("*" | "(" ImportAsNames() ")" | ImportAsNames()))
}

void ImportAsName() :
{}
{
  < NAME > [< AS > < NAME >]
}

void DottedAsName() :
{}
{
  DottedName() [< AS > < NAME >]
}

void ImportAsNames() :
{}
{
  ImportAsName() (< COMMA > ImportAsName())*
}

void DottedAsNames() :
{}
{
  DottedAsName() (< COMMA > DottedAsName())*
}

void DottedName() :
{}
{
  < NAME > (< DOT > < NAME >)*
}

void AssertStmt() :
{}
{
  < ASSERT > Test() [< COMMA > Test()]
}

void CompoundStmt() :
{}
{ 
  IfStmt()
| LOOKAHEAD(3) ERROR_IfStmt()
| WhileStmt()
| LOOKAHEAD(3) ERROR_WhileStmt()
| DoStmt()
| LOOKAHEAD(3) ERROR_DoStmt()
| LOOKAHEAD(3) ForStmt()
| LOOKAHEAD(3) ERROR_ForStmt1()
| LOOKAHEAD(3) ERROR_ForStmt2()
| TryStmt()
| WithStmt()
| FuncDef()
| LOOKAHEAD(3) ERROR_FuncDef()
| LOOKAHEAD((Modifier())* < CLASS >) ClassDef()
| LOOKAHEAD((Modifier())* < INTERFACE >) InterfaceDef()
| ERROR_ClassDef()
}

void IfStmt() :
{}
{
  < IF > Test() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) (< ELSEIF > Test() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()))* [< ELSE > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())]
}

void WhileStmt() :
{}
{
  < WHILE > Test() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) [< ELSE > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())]
}

void DoStmt() :
{}
{
  < DO > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) < WHILE > Test()
}

void ForStmt() :
{}
{
  < FOR > Exprlist() < IN > Testlist() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) [< ELSE > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())]
}

void TryStmt() :
{}
{
  (< TRY > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) ((HandleClause() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()))+ [< ELSE > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())] [< FINALLY > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())] | < FINALLY > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())))
}

void HandleClause() :
{}
{
  < HANDLE > [LOOKAHEAD(2) Test() [< AS > < NAME >]]
}

void Suite() :
{}
{
  (((< OPENBRACE > (Stmt())+ < CLOSEBRACE >)) (LOOKAHEAD(2) < NEWLINE >)*)
}

void WithStmt() :
{}
{
  < WITH > WithItem() (< COMMA > WithItem())* (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())
}

void WithItem() :
{}
{
  Test() [< AS > Expr()]
}

void Test() :
{}
{
  LOOKAHEAD([VarArglist()] < LAMBDA >) LambDef() | (OrTest() [LOOKAHEAD(2) < IF > OrTest() < ELSE > Test()])
}

void OrTest() :
{}
{
  XorTest() (< OR > XorTest())*
}

void XorTest() :
{}
{
  AndTest() (< XOR > AndTest())*
}

void AndTest() :
{}
{
  NotTest() (< AND > NotTest())*
}

void NotTest() :
{}
{
  < NOT > NotTest() | Comparison()
}

void Comparison() :
{}
{
  Expr() (LOOKAHEAD(2) CompOp() Expr())*
}

void CompOp() :
{ Token t = new Token(); }
{
  (  t=< GREATER >
| t=< LESS >
| t=< EQUALS >
| t=< GREATEREQ >
| t=< LESSEQ >
| t=< NOTEQ >
| t=< IN >
| t=< NOT > < IN >
| LOOKAHEAD(2) t=< IS >
| t=< IS > < NOT >
)
{ jjtThis.CompOp = t.image; }

}

void Expr() :
{}
{
  XorExpr() ("|" XorExpr())*
}

void XorExpr() :
{}
{
  AndExpr() ("^" AndExpr())*
}

void AndExpr() :
{}
{
  ShiftExpr() ("&" ShiftExpr())*
}

void ShiftExpr() :
{ Token t = new Token(); }
{
  ArithExpr() (((t=< SHIFTLEFT >) | (t=< SHIFTRIGHT >)) ArithExpr())*
  { jjtThis.ShiftOp = t.image; }
}

void ArithExpr() :
{ Token t = new Token(); }
{
  Term() (LOOKAHEAD(2) ((t=< PLUS >) | (t=< MINUS >)) Term())*
  { jjtThis.AddOp = t.image; }
}

void Term() :
{ Token t = new Token(); }
{
  Factor() (LOOKAHEAD(2) ((t=< MULTIPLY >) | (t=< DIVIDE >) | (t=< MOD >) | (t=< DIVIDEINT >)) Factor())*
  { jjtThis.MulOp = t.image; }
}

void Factor() :
{ Token t = new Token(); }
{
  (((t=< PLUS >) | (t=< MINUS >) | (t=< TILDE >)) Factor()) | Power()
  { jjtThis.SignOp = t.image; }
}

void Power() :
{}
{
  AtomExpr() ["**" Factor()]
}

void AtomExpr() :
{}
{
  Atom() (LOOKAHEAD(2) Trailer())*
}

void Atom() :
{}
{
  (    ("(" [YieldExpr() | TestlistComp()] ")")
  | ("[" [TestlistComp()] "]")
  | Name()
  | Number()
  | < ELLIPSES >
  | True()
  | False()
  | Args()
  | (LOOKAHEAD(2) String())+)
}

void Name() :
{ Token t; }
{
  t=< NAME >
  {
    jjtThis.AtomValue = t.image;
  }
}

void Number() :
{ Token t; }
{
  t=< NUMBER >
  {
	jjtThis.AtomValue = t.image;
  }
}

void True() :
{ Token t; }
{
  t=< TRUE >
  {
	jjtThis.AtomValue = t.image;
  }
}

void False() :
{ Token t; }
{
  t=< FALSE >
  {
	jjtThis.AtomValue = t.image;
  }
}

void Args() :
{}
{
  < ARGS >
}

void String() :
{ Token t; }
{
  t=< STRING >
  {
    jjtThis.AtomValue = t.image;
  }
}

void TestlistComp() :
{}
{
  (Test() | StarExpr()) (CompFor() | (< COMMA > (Test() | StarExpr()))*)
}

void Trailer() :
{}
{
  "(" [Arglist()] ")" | "[" Subscriptlist() "]" | < DOT > < NAME >
}

void Subscriptlist() :
{}
{
  Subscript() (< COMMA > Subscript())*
}

void Subscript() :
{}
{
  LOOKAHEAD(2) Test() | [Test()] < COLON> [Test()] [SliceOp()]
}

void Arglist() :
{}
{
  Argument() (< COMMA > Argument())*
}

void Argument() :
{}
{
  (LOOKAHEAD(3) Test() [CompFor()] | Test() < ASSIGN > Test() | "*" Test())
}

void CompIter() :
{}
{
  CompFor() | CompIf()
}

void CompFor() :
{}
{
  < FOR > Exprlist() < IN > OrTest() [CompIter()]
}

void CompIf() :
{}
{
  < IF > TestNocond() [CompIter()]
}

void SliceOp() :
{}
{
  < COLON> [Test()]
}

void Exprlist() :
{}
{
  (Expr() | StarExpr()) (< COMMA > (Expr() | StarExpr()))*
}

void StarExpr() :
{}
{
  "*" Expr()
}

void Testlist() :
{}
{
  Test() (< COMMA > Test())*
}

void FuncDef() :
{}
{
  < DEFINE > < NAME > Parameters() ["->" Test()] (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())
}


void ClassDef() :
{}
{
  (Modifier())* < CLASS > < NAME > [< COLON> ClassName()] [< FOLLOWS > InterfaceName() (< COMMA > InterfaceName())*] (LOOKAHEAD(2) < NEWLINE >)* (ClassSuite() | ERROR_ClassSuite())
}

void Modifier() :
{}
{
  < PUBLIC >
| < PRIVATE >
| < PROTECTED >
| < STATIC >
| < ABSTRACT >
}

void ClassName() :
{}
{
  DottedAsName()
}

void InterfaceName() :
{}
{
  DottedAsName()
}

void ClassSuite() :
{}
{
  < OPENBRACE > (ClassStmt())* < CLOSEBRACE >
}

void ClassStmt() :
{}
{
  MethodDef()
| LOOKAHEAD(2) ERROR_MethodDef()
| LOOKAHEAD(3) ConstructorDef()
| VarDef()
| Newline()
}

void MethodDef() :
{}
{
  < DEFINE > (Modifier())* < NAME > Parameters() ["->" Test()] (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())
}

void ConstructorDef() :
{}
{
  (Modifier())* < NAME > Parameters() ["->" Test()] (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())
}

void VarDef() :
{}
{
  (Modifier())* SimpleStmt()
}

void InterfaceDef() :
{}
{
  (Modifier())* < INTERFACE > < NAME > [< COLON> InterfaceName() (< COMMA > InterfaceName())*] (LOOKAHEAD(2) < NEWLINE >)* (ClassSuite() | ERROR_ClassSuite())
}

void Parameters() :
{}
{
  "(" [TypeDArglist()] ")"
}

void TypeDArglist() :
{}
{
  TfpDef() [< ASSIGN > Test()] (LOOKAHEAD(2) < COMMA > TfpDef() [< ASSIGN > Test()])* [< COMMA > < ARGS >]
}

void TfpDef() :
{}
{
  < NAME > [< COLON> Test()]
}

void LambDef() :
{}
{
  [VarArglist()] < LAMBDA > Test()
}

void LambDefNocond() :
{}
{
  ([VarArglist()] < LAMBDA > TestNocond())
}

void VarArglist() :
{}
{
  < NAME > [< ASSIGN > Test()] (LOOKAHEAD(2) < COMMA > < NAME > [< ASSIGN > Test()])*
}

void TestNocond() :
{}
{
  LOOKAHEAD(2) OrTest() | LambDefNocond()
}



// Error Handling

void ERROR_IfStmt() #void :
{}
{
  { int line = -1; int column = -1; }
  { line = getToken(0).beginLine; column = getToken(0).beginColumn; } < NAME > Test() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) (< ELSEIF > Test() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()))* [< ELSE > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())]

  {
    error_printmessage("Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}

void ERROR_WhileStmt() #void :
{}
{
  { int line = -1; int column = -1; }
  { line = getToken(0).beginLine; column = getToken(0).beginColumn; } < NAME > Test() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) [< ELSE > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())]

  {
    error_printmessage("Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}

void ERROR_DoStmt() #void :
{}
{
  { int line = -1; int column = -1; }
  { line = getToken(1).beginLine; column = getToken(1).beginColumn; } < NAME > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) < WHILE > Test()

  {
    error_printmessage("Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}

void ERROR_ForStmt1() #void :
{}
{
  { int line = -1; int column = -1; }
  { line = getToken(1).beginLine; column = getToken(1).beginColumn; } < NAME > Exprlist() < IN > Testlist() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) [< ELSE > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())]

  {
    error_printmessage("Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}

void ERROR_ForStmt2() #void :
{}
{
  { int line = -1; int column = -1; }
  "for" Exprlist() { line = getToken(1).beginLine; column = getToken(1).beginColumn; } < NAME > Testlist() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) [< ELSE > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())]

  {
    error_printmessage("Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}

void ERROR_Suite() #void :
{}
{
  { int line = -1; int column = -1; }
  ((({ line = getToken(0).beginLine; column = getToken(0).beginColumn; } (Stmt())+ < CLOSEBRACE >)) (LOOKAHEAD(2) < NEWLINE >)*)

  {
    error_printmessage("Suite Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}

void ERROR_FuncDef() #void :
{}
{
  { int line = -1; int column = -1; }
  { line = getToken(1).beginLine; column = getToken(1).beginColumn; } < NAME > < NAME > Parameters() ["->" Test()] (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())

  {
    error_printmessage("Function Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}

void ERROR_ClassDef() #void :
{}
{
  { int line = -1; int column = -1; }
  (Modifier())* { line = getToken(1).beginLine; column = getToken(1).beginColumn; } < NAME > < NAME > [< COLON> ClassName()] [< FOLLOWS > InterfaceName() (< COMMA > InterfaceName())*] (LOOKAHEAD(2) < NEWLINE >)* (ClassSuite() | ERROR_ClassSuite())
  {
    error_printmessage("Class or Interface Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}

void ERROR_ClassSuite() #void :
{}
{
  { int line = -1; int column = -1; }
  ({ line = getToken(0).beginLine; column = getToken(0).beginColumn; } (ClassStmt())* < CLOSEBRACE >)

  {
    error_printmessage("ClassSuite Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}

void ERROR_MethodDef() #void :
{}
{
  { int line = -1; int column = -1; }
  { line = getToken(1).beginLine; column = getToken(1).beginColumn; } < NAME > (Modifier())* < NAME > Parameters() ["->" Test()] (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())

  {
    error_printmessage("Method Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}




TOKEN :
{
  < NAME : ["a"-"z", "A"-"Z", "$", "_"] (["a"-"z", "A"-"Z", "0"-"9", "$", "_"])* >
| < NEWLINE : "\n" | "\r" >
| < STRING : ("\"" (~["\n", "\r"])* "\"") | ("\'" (~["\n", "\r"])* "\'") >
}

TOKEN :
{
  < NUMBER : < FLOAT > | < INT > >
| < INT : (["1"-"9"] (["0"-"9"])*) | ("0") >
| < FLOAT : ["1"-"9"] (["0"-"9"])* "." (["0"-"9"])+ >
}


JAVACODE
void error_printmessage(String s) {
  System.out.println("\n---------- EXCEPTION ENCOUNTERED ----------");
  System.out.println(s);
  System.out.println("\n");
}