/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Grammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(Grammar)
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.*;
public class Grammar/*@bgen(jjtree)*/implements GrammarTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTGrammarState jjtree = new JJTGrammarState();

/*@egen*/  public static void main(String args []) throws FileNotFoundException  {    Grammar parser = new Grammar(new FileInputStream("my_tests.txt"));
    HashMap<String, WI_Value > symbolTable = new HashMap<String, WI_Value >();
    try { 
   		SimpleNode root = parser.Input();
   		root.interpret(symbolTable);
   		//root.dump("  ");
  	} catch (ParseException e) {
  	  	System.out.println("Oops!");
  	  	e.printStackTrace();
  	}  }}PARSER_END(Grammar)SKIP :
{
  "\t"
| " "
}

SPECIAL_TOKEN :
{
  < SINGLE_LINE_COMMENT: "~~" (~["~"]) (~["\n", "\r"])* (["\n", "\r"]) >
}

TOKEN :
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
| < MOD : "%" >
| < TILDE : "~" (~["~"])>
| < POWER : "**" >
| < DIVIDEINT : "//" >
| < SHIFTLEFT : "<<" >
| < SHIFTRIGHT : ">>" >
| < GREATER : ">" >
| < LESS : "<" >
| < EQUALS : "==" >
| < GREATEREQ : ">=" >
| < LESSEQ : "<=" >
| < NOTEQ : "!=" >
| < IN : "in" >
| < NOT : "not" >
| < IS : "is" >
}

TOKEN :
{
  < PLUSEQ : "+=" >
| < MINUSEQ : "-=" >
| < MULTIPLYEQ : "*=" >
| < DIVIDEEQ : "/=" >
| < MODEQ : "%=" >
| < ANDEQ : "&=" >
| < OREQ : "|=" >
| < XOREQ : "^=" >
| < SHIFTLEFTEQ : "<<=" >
| < SHIFTRIGHTEQ : ">>=" >
| < POWEREQ : "**=" >
| < DIVIDEINTEQ : "//=" >
}

TOKEN :
{
  < COLON : ":" >
| < SEMICOLON : ";" >
| < ELLIPSES : "..." >
| < DOT : "." >
| < COMMA : "," >
}


TOKEN :
{
  < OPENBRACE : "{" >
| < CLOSEBRACE : "}" >
}

TOKEN :
{
  < LAMBDA : "=>" >
}

TOKEN :
{
  < ABSTRACT : "abstract" >
| < AND : "and" >
| < ARGS : "args" >
| < AS : "as" >
| < ASSERT : "assert" >
| < BREAK : "break" >
| < CLASS : "class" >
| < CONTINUE : "continue" >
| < DEFINE : "define" >
| < DO : "do" >
| < ELSE : "else" >
| < ELSEIF : "elseif" >
| < FALSE : "false" >
| < FINALLY : "finally" >
| < FOLLOWS : "follows" >
| < FOR : "for" >
| < FROM : "from" >
| < HANDLE : "handle" >
| < IF : "if" >
| < IMPORT : "import" >
| < INTERFACE : "interface" >
| < OR : "or" >
| < PRIVATE : "private" >
| < PROTECTED : "protected" >
| < PUBLIC : "public" >
| < RAISE : "raise" >
| < RETURN : "return" >
| < STATIC : "static" >
| < THIS : "this" >
| < TRUE : "true" >
| < TRY : "try" >
| < WHILE : "while" >
| < WITH : "with" >
| < XOR : "xor" >
| < YIELD : "yield" >
}

SKIP :
{
  "~~~" : WithinComment
}

<WithinComment> SKIP :
{
  "~~~" : DEFAULT
}

<WithinComment> MORE :
{
  <~[]>
}


SimpleNode Input() :
{/*@bgen(jjtree) Input */
  SimpleNode jjtn000 = new SimpleNode(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Input */
  try {
/*@egen*/
  (Stmt())*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Stmt()       :
{}
{
  LOOKAHEAD(2) CompoundStmt()
| SimpleStmt()
| Newline()
}

void Newline()       :
{}
{
  < NEWLINE >
}

void SimpleStmt() :
{/*@bgen(jjtree) SimpleStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTSIMPLESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SimpleStmt */
  try {
/*@egen*/
  SmallStmt() (< SEMICOLON > SmallStmt())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void SmallStmt()       :
{}
{
  FlowStmt() < NEWLINE >
| ImportStmt() < NEWLINE >
| AssertStmt() < NEWLINE >
| ExprStmt() < NEWLINE >
}

void ExprStmt() :
{/*@bgen(jjtree) ExprStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExprStmt */
  try {
/*@egen*/
  TestlistStarExpr()  (Annassign()
              		| (Augassign()  (YieldExpr() | Testlist()))
                    | (< ASSIGN >   (YieldExpr() | TestlistStarExpr()))*)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Annassign() :
{/*@bgen(jjtree) Annassign */
  SimpleNode jjtn000 = new SimpleNode(JJTANNASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Annassign */
  try {
/*@egen*/
  < COLON> Test() [< ASSIGN > Test()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TestlistStarExpr() :
{/*@bgen(jjtree) TestlistStarExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTTESTLISTSTAREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TestlistStarExpr */
  try {
/*@egen*/
  (Test() | StarExpr()) (< COMMA > (Test() | StarExpr()))*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Augassign() :
{/*@bgen(jjtree) Augassign */
  SimpleNode jjtn000 = new SimpleNode(JJTAUGASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Augassign */
try {
/*@egen*/
(  t=< PLUSEQ >
| t=< MINUSEQ >
| t=< MULTIPLYEQ >
| t=< DIVIDEEQ >
| t=< MODEQ >
| t=< ANDEQ >
| t=< OREQ >
| t=< XOREQ >
| t=< SHIFTRIGHTEQ >
| t=< SHIFTLEFTEQ >
| t=< POWEREQ >
| t=< DIVIDEINTEQ >
)/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
  jjtn000.AugassignOp = t.image;
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void FlowStmt() :
{/*@bgen(jjtree) FlowStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTFLOWSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FlowStmt */
  try {
/*@egen*/
  BreakStmt()
| ContinueStmt()
| ReturnStmt()
| RaiseStmt()
| YieldStmt()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BreakStmt() :
{/*@bgen(jjtree) BreakStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTBREAKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BreakStmt */
  try {
/*@egen*/
  < BREAK >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ContinueStmt() :
{/*@bgen(jjtree) ContinueStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTINUESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ContinueStmt */
  try {
/*@egen*/
  < CONTINUE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ReturnStmt() :
{/*@bgen(jjtree) ReturnStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURNSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnStmt */
  try {
/*@egen*/
  < RETURN > [LOOKAHEAD(2) Testlist()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void YieldStmt() :
{/*@bgen(jjtree) YieldStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTYIELDSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) YieldStmt */
  try {
/*@egen*/
  YieldExpr()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void YieldExpr() :
{/*@bgen(jjtree) YieldExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTYIELDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) YieldExpr */
  try {
/*@egen*/
  < YIELD > [LOOKAHEAD(2) YieldArg()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void YieldArg() :
{/*@bgen(jjtree) YieldArg */
  SimpleNode jjtn000 = new SimpleNode(JJTYIELDARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) YieldArg */
  try {
/*@egen*/
  < FROM > Test() | Testlist()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void RaiseStmt() :
{/*@bgen(jjtree) RaiseStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTRAISESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RaiseStmt */
  try {
/*@egen*/
  < RAISE > [LOOKAHEAD(2) Test() [LOOKAHEAD(2) < FROM > Test()]]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ImportStmt() :
{/*@bgen(jjtree) ImportStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImportStmt */
  try {
/*@egen*/
  ImportName() | ImportFrom()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ImportName() :
{/*@bgen(jjtree) ImportName */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImportName */
  try {
/*@egen*/
  < IMPORT > DottedAsNames()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ImportFrom() :
{/*@bgen(jjtree) ImportFrom */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTFROM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImportFrom */
  try {
/*@egen*/
  (< FROM > (LOOKAHEAD(2) (< DOT > | < ELLIPSES >)* DottedName() | (< DOT > | < ELLIPSES >)+) < IMPORT > ("*" | "(" ImportAsNames() ")" | ImportAsNames()))/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ImportAsName() :
{/*@bgen(jjtree) ImportAsName */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTASNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImportAsName */
  try {
/*@egen*/
  < NAME > [< AS > < NAME >]/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DottedAsName() :
{/*@bgen(jjtree) DottedAsName */
  SimpleNode jjtn000 = new SimpleNode(JJTDOTTEDASNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DottedAsName */
  try {
/*@egen*/
  DottedName() [< AS > < NAME >]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ImportAsNames() :
{/*@bgen(jjtree) ImportAsNames */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTASNAMES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImportAsNames */
  try {
/*@egen*/
  ImportAsName() (< COMMA > ImportAsName())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DottedAsNames() :
{/*@bgen(jjtree) DottedAsNames */
  SimpleNode jjtn000 = new SimpleNode(JJTDOTTEDASNAMES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DottedAsNames */
  try {
/*@egen*/
  DottedAsName() (< COMMA > DottedAsName())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DottedName() :
{/*@bgen(jjtree) DottedName */
  SimpleNode jjtn000 = new SimpleNode(JJTDOTTEDNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DottedName */
  try {
/*@egen*/
  < NAME > (< DOT > < NAME >)*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AssertStmt() :
{/*@bgen(jjtree) AssertStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTASSERTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AssertStmt */
  try {
/*@egen*/
  < ASSERT > Test() [< COMMA > Test()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CompoundStmt() :
{/*@bgen(jjtree) CompoundStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPOUNDSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompoundStmt */
  try {
/*@egen*/ 
  IfStmt()
| LOOKAHEAD(3) ERROR_IfStmt()
| WhileStmt()
| LOOKAHEAD(3) ERROR_WhileStmt()
| DoStmt()
| LOOKAHEAD(3) ERROR_DoStmt()
| LOOKAHEAD(3) ForStmt()
| LOOKAHEAD(3) ERROR_ForStmt1()
| LOOKAHEAD(3) ERROR_ForStmt2()
| TryStmt()
| WithStmt()
| FuncDef()
| LOOKAHEAD(3) ERROR_FuncDef()
| LOOKAHEAD((Modifier())* < CLASS >) ClassDef()
| LOOKAHEAD((Modifier())* < INTERFACE >) InterfaceDef()
| ERROR_ClassDef()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IfStmt() :
{/*@bgen(jjtree) IfStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStmt */
  try {
/*@egen*/
  < IF > Test() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) (< ELSEIF > Test() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()))* [< ELSE > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WhileStmt() :
{/*@bgen(jjtree) WhileStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileStmt */
  try {
/*@egen*/
  < WHILE > Test() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) [< ELSE > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DoStmt() :
{/*@bgen(jjtree) DoStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTDOSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DoStmt */
  try {
/*@egen*/
  < DO > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) < WHILE > Test()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ForStmt() :
{/*@bgen(jjtree) ForStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForStmt */
  try {
/*@egen*/
  < FOR > Exprlist() < IN > Testlist() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) [< ELSE > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TryStmt() :
{/*@bgen(jjtree) TryStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTTRYSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TryStmt */
  try {
/*@egen*/
  (< TRY > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) ((HandleClause() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()))+ [< ELSE > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())] [< FINALLY > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())] | < FINALLY > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())))/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void HandleClause() :
{/*@bgen(jjtree) HandleClause */
  SimpleNode jjtn000 = new SimpleNode(JJTHANDLECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HandleClause */
  try {
/*@egen*/
  < HANDLE > [LOOKAHEAD(2) Test() [< AS > < NAME >]]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Suite() :
{/*@bgen(jjtree) Suite */
  SimpleNode jjtn000 = new SimpleNode(JJTSUITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Suite */
  try {
/*@egen*/
  (((< OPENBRACE > (Stmt())+ < CLOSEBRACE >)) (LOOKAHEAD(2) < NEWLINE >)*)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WithStmt() :
{/*@bgen(jjtree) WithStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTWITHSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WithStmt */
  try {
/*@egen*/
  < WITH > WithItem() (< COMMA > WithItem())* (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WithItem() :
{/*@bgen(jjtree) WithItem */
  SimpleNode jjtn000 = new SimpleNode(JJTWITHITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WithItem */
  try {
/*@egen*/
  Test() [< AS > Expr()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Test() :
{/*@bgen(jjtree) Test */
  SimpleNode jjtn000 = new SimpleNode(JJTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Test */
  try {
/*@egen*/
  LOOKAHEAD([VarArglist()] < LAMBDA >) LambDef() | (OrTest() [LOOKAHEAD(2) < IF > OrTest() < ELSE > Test()])/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OrTest() :
{/*@bgen(jjtree) OrTest */
  SimpleNode jjtn000 = new SimpleNode(JJTORTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrTest */
  try {
/*@egen*/
  (XorTest() (< OR > XorTest())*)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void XorTest() :
{/*@bgen(jjtree) XorTest */
  SimpleNode jjtn000 = new SimpleNode(JJTXORTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) XorTest */
  try {
/*@egen*/
  (AndTest() (< XOR > AndTest())*)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AndTest() :
{/*@bgen(jjtree) AndTest */
  SimpleNode jjtn000 = new SimpleNode(JJTANDTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AndTest */
  try {
/*@egen*/
  (NotTest() (< AND > NotTest())*)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NotTest() :
{/*@bgen(jjtree) NotTest */
  SimpleNode jjtn000 = new SimpleNode(JJTNOTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NotTest */
  try {
/*@egen*/
  (< NOT > NotTest()) | Comparison()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Comparison() :
{/*@bgen(jjtree) Comparison */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Comparison */
  try {
/*@egen*/
  (Expr() (LOOKAHEAD(2) CompOp() Expr())*)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CompOp() :
{/*@bgen(jjtree) CompOp */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t = new Token(); }
{/*@bgen(jjtree) CompOp */
  try {
/*@egen*/
  (  t=< GREATER >
| t=< LESS >
| t=< EQUALS >
| t=< GREATEREQ >
| t=< LESSEQ >
| t=< NOTEQ >
| t=< IN >
| t=< NOT > < IN >
| LOOKAHEAD(2) t=< IS >
| t=< IS > < NOT >
)/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{ jjtn000.CompOp = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void Expr() :
{/*@bgen(jjtree) Expr */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr */
  try {
/*@egen*/
  (XorExpr() ("|" XorExpr())*)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void XorExpr() :
{/*@bgen(jjtree) XorExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTXOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) XorExpr */
  try {
/*@egen*/
  (AndExpr() ("^" AndExpr())*)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AndExpr() :
{/*@bgen(jjtree) AndExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AndExpr */
  try {
/*@egen*/
  (ShiftExpr() ("&" ShiftExpr())*)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ShiftExpr() :
{/*@bgen(jjtree) ShiftExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTSHIFTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ShiftExpr */
  try {
/*@egen*/
  (ArithExpr() (((ShiftLeft()) | (ShiftRight())) ArithExpr())*)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ShiftLeft() :
{/*@bgen(jjtree) ShiftLeft */
  SimpleNode jjtn000 = new SimpleNode(JJTSHIFTLEFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) ShiftLeft */
  try {
/*@egen*/
  t=< SHIFTLEFT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.ShiftOp = t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ShiftRight() :
{/*@bgen(jjtree) ShiftRight */
  SimpleNode jjtn000 = new SimpleNode(JJTSHIFTRIGHT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) ShiftRight */
  try {
/*@egen*/
  t=< SHIFTRIGHT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.ShiftOp = t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArithExpr() :
{/*@bgen(jjtree) ArithExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTARITHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArithExpr */
  try {
/*@egen*/
  (Term() (LOOKAHEAD(2) ((Plus()) | (Minus())) Term())*)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Plus() :
{/*@bgen(jjtree) Plus */
  SimpleNode jjtn000 = new SimpleNode(JJTPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Plus */
  try {
/*@egen*/
  t=< PLUS >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.AddOp = t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Minus() :
{/*@bgen(jjtree) Minus */
  SimpleNode jjtn000 = new SimpleNode(JJTMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Minus */
  try {
/*@egen*/
  t=< MINUS >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.AddOp = t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Term() :
{/*@bgen(jjtree) Term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Term */
  try {
/*@egen*/
  (Factor() (LOOKAHEAD(2) ((Multiply()) | (Divide()) | (Mod()) | (DivideInt())) Factor())*)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Multiply() :
{/*@bgen(jjtree) Multiply */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Multiply */
  try {
/*@egen*/
  t=< MULTIPLY >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.MulOp = t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Divide() :
{/*@bgen(jjtree) Divide */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Divide */
  try {
/*@egen*/
  t=< DIVIDE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.MulOp = t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Mod() :
{/*@bgen(jjtree) Mod */
  SimpleNode jjtn000 = new SimpleNode(JJTMOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Mod */
  try {
/*@egen*/
  t=< MOD >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.MulOp = t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DivideInt() :
{/*@bgen(jjtree) DivideInt */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVIDEINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) DivideInt */
  try {
/*@egen*/
  t=< DIVIDEINT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.MulOp = t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Factor() :
{/*@bgen(jjtree) Factor */
  SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Factor */
  try {
/*@egen*/
  (((Plus()) | (Minus()) | (Tilde())) Factor()) | Power()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Tilde() :
{/*@bgen(jjtree) Tilde */
  SimpleNode jjtn000 = new SimpleNode(JJTTILDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Tilde */
  try {
/*@egen*/
  t=< TILDE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.AddOp = t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Power() :
{/*@bgen(jjtree) Power */
  SimpleNode jjtn000 = new SimpleNode(JJTPOWER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Power */
  try {
/*@egen*/
  AtomExpr() ["**" Factor()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AtomExpr() :
{/*@bgen(jjtree) AtomExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTATOMEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AtomExpr */
  try {
/*@egen*/
  Atom() (LOOKAHEAD(2) Trailer())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Atom() :
{/*@bgen(jjtree) Atom */
  SimpleNode jjtn000 = new SimpleNode(JJTATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Atom */
  try {
/*@egen*/
  (    ("(" [YieldExpr() | TestlistComp()] ")")
  | ("[" [TestlistComp()] "]")
  | Name()
  | Number()
  | < ELLIPSES >
  | True()
  | False()
  | Args()
  | (LOOKAHEAD(2) String())+)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Name() :
{/*@bgen(jjtree) Name */
  SimpleNode jjtn000 = new SimpleNode(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Name */
  try {
/*@egen*/
  t=< NAME >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.AtomValue = t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Number() :
{/*@bgen(jjtree) Number */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Number */
  try {
/*@egen*/
  t=< NUMBER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	jjtn000.AtomValue = t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void True() :
{/*@bgen(jjtree) True */
  SimpleNode jjtn000 = new SimpleNode(JJTTRUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) True */
  try {
/*@egen*/
  t=< TRUE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	jjtn000.AtomValue = t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void False() :
{/*@bgen(jjtree) False */
  SimpleNode jjtn000 = new SimpleNode(JJTFALSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) False */
  try {
/*@egen*/
  t=< FALSE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	jjtn000.AtomValue = t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Args() :
{/*@bgen(jjtree) Args */
  SimpleNode jjtn000 = new SimpleNode(JJTARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Args */
  try {
/*@egen*/
  < ARGS >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void String() :
{/*@bgen(jjtree) String */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) String */
  try {
/*@egen*/
  t=< STRING >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.AtomValue = t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TestlistComp() :
{/*@bgen(jjtree) TestlistComp */
  SimpleNode jjtn000 = new SimpleNode(JJTTESTLISTCOMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TestlistComp */
  try {
/*@egen*/
  (Test() | StarExpr()) (CompFor() | (< COMMA > (Test() | StarExpr()))*)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Trailer() :
{/*@bgen(jjtree) Trailer */
  SimpleNode jjtn000 = new SimpleNode(JJTTRAILER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Trailer */
  try {
/*@egen*/
  "(" [Arglist()] ")" | "[" Subscriptlist() "]" | < DOT > < NAME >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Subscriptlist() :
{/*@bgen(jjtree) Subscriptlist */
  SimpleNode jjtn000 = new SimpleNode(JJTSUBSCRIPTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Subscriptlist */
  try {
/*@egen*/
  Subscript() (< COMMA > Subscript())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Subscript() :
{/*@bgen(jjtree) Subscript */
  SimpleNode jjtn000 = new SimpleNode(JJTSUBSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Subscript */
  try {
/*@egen*/
  LOOKAHEAD(2) Test() | [Test()] < COLON> [Test()] [SliceOp()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Arglist() :
{/*@bgen(jjtree) Arglist */
  SimpleNode jjtn000 = new SimpleNode(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Arglist */
  try {
/*@egen*/
  Argument() (< COMMA > Argument())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Argument() :
{/*@bgen(jjtree) Argument */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Argument */
  try {
/*@egen*/
  (LOOKAHEAD(3) Test() [CompFor()] | Test() < ASSIGN > Test() | "*" Test())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CompIter() :
{/*@bgen(jjtree) CompIter */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPITER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompIter */
  try {
/*@egen*/
  CompFor() | CompIf()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CompFor() :
{/*@bgen(jjtree) CompFor */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompFor */
  try {
/*@egen*/
  < FOR > Exprlist() < IN > OrTest() [CompIter()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CompIf() :
{/*@bgen(jjtree) CompIf */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompIf */
  try {
/*@egen*/
  < IF > TestNocond() [CompIter()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SliceOp() :
{/*@bgen(jjtree) SliceOp */
  SimpleNode jjtn000 = new SimpleNode(JJTSLICEOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SliceOp */
  try {
/*@egen*/
  < COLON> [Test()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Exprlist() :
{/*@bgen(jjtree) Exprlist */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exprlist */
  try {
/*@egen*/
  (Expr() | StarExpr()) (< COMMA > (Expr() | StarExpr()))*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void StarExpr() :
{/*@bgen(jjtree) StarExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTSTAREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StarExpr */
  try {
/*@egen*/
  "*" Expr()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Testlist() :
{/*@bgen(jjtree) Testlist */
  SimpleNode jjtn000 = new SimpleNode(JJTTESTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Testlist */
  try {
/*@egen*/
  Test() (< COMMA > Test())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FuncDef() :
{/*@bgen(jjtree) FuncDef */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FuncDef */
  try {
/*@egen*/
  < DEFINE > < NAME > Parameters() ["->" Test()] (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void ClassDef() :
{/*@bgen(jjtree) ClassDef */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassDef */
  try {
/*@egen*/
  (Modifier())* < CLASS > < NAME > [< COLON> ClassName()] [< FOLLOWS > InterfaceName() (< COMMA > InterfaceName())*] (LOOKAHEAD(2) < NEWLINE >)* (ClassSuite() | ERROR_ClassSuite())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Modifier() :
{/*@bgen(jjtree) Modifier */
  SimpleNode jjtn000 = new SimpleNode(JJTMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Modifier */
  try {
/*@egen*/
  < PUBLIC >
| < PRIVATE >
| < PROTECTED >
| < STATIC >
| < ABSTRACT >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ClassName() :
{/*@bgen(jjtree) ClassName */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassName */
  try {
/*@egen*/
  DottedAsName()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void InterfaceName() :
{/*@bgen(jjtree) InterfaceName */
  SimpleNode jjtn000 = new SimpleNode(JJTINTERFACENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InterfaceName */
  try {
/*@egen*/
  DottedAsName()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ClassSuite() :
{/*@bgen(jjtree) ClassSuite */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSSUITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassSuite */
  try {
/*@egen*/
  < OPENBRACE > (ClassStmt())* < CLOSEBRACE >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ClassStmt() :
{/*@bgen(jjtree) ClassStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassStmt */
  try {
/*@egen*/
  MethodDef()
| LOOKAHEAD(2) ERROR_MethodDef()
| LOOKAHEAD(3) ConstructorDef()
| VarDef()
| Newline()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MethodDef() :
{/*@bgen(jjtree) MethodDef */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodDef */
  try {
/*@egen*/
  < DEFINE > (Modifier())* < NAME > Parameters() ["->" Test()] (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ConstructorDef() :
{/*@bgen(jjtree) ConstructorDef */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTRUCTORDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConstructorDef */
  try {
/*@egen*/
  (Modifier())* < NAME > Parameters() ["->" Test()] (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VarDef() :
{/*@bgen(jjtree) VarDef */
  SimpleNode jjtn000 = new SimpleNode(JJTVARDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarDef */
  try {
/*@egen*/
  (Modifier())* SimpleStmt()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void InterfaceDef() :
{/*@bgen(jjtree) InterfaceDef */
  SimpleNode jjtn000 = new SimpleNode(JJTINTERFACEDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InterfaceDef */
  try {
/*@egen*/
  (Modifier())* < INTERFACE > < NAME > [< COLON> InterfaceName() (< COMMA > InterfaceName())*] (LOOKAHEAD(2) < NEWLINE >)* (ClassSuite() | ERROR_ClassSuite())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Parameters() :
{/*@bgen(jjtree) Parameters */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Parameters */
  try {
/*@egen*/
  "(" [TypeDArglist()] ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TypeDArglist() :
{/*@bgen(jjtree) TypeDArglist */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEDARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeDArglist */
  try {
/*@egen*/
  TfpDef() [< ASSIGN > Test()] (LOOKAHEAD(2) < COMMA > TfpDef() [< ASSIGN > Test()])* [< COMMA > < ARGS >]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TfpDef() :
{/*@bgen(jjtree) TfpDef */
  SimpleNode jjtn000 = new SimpleNode(JJTTFPDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TfpDef */
  try {
/*@egen*/
  < NAME > [< COLON> Test()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void LambDef() :
{/*@bgen(jjtree) LambDef */
  SimpleNode jjtn000 = new SimpleNode(JJTLAMBDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LambDef */
  try {
/*@egen*/
  [VarArglist()] < LAMBDA > Test()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void LambDefNocond() :
{/*@bgen(jjtree) LambDefNocond */
  SimpleNode jjtn000 = new SimpleNode(JJTLAMBDEFNOCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LambDefNocond */
  try {
/*@egen*/
  ([VarArglist()] < LAMBDA > TestNocond())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VarArglist() :
{/*@bgen(jjtree) VarArglist */
  SimpleNode jjtn000 = new SimpleNode(JJTVARARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarArglist */
  try {
/*@egen*/
  < NAME > [< ASSIGN > Test()] (LOOKAHEAD(2) < COMMA > < NAME > [< ASSIGN > Test()])*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TestNocond() :
{/*@bgen(jjtree) TestNocond */
  SimpleNode jjtn000 = new SimpleNode(JJTTESTNOCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TestNocond */
  try {
/*@egen*/
  LOOKAHEAD(2) OrTest() | LambDefNocond()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}



// Error Handling

void ERROR_IfStmt()       :
{}
{
  { int line = -1; int column = -1; }
  { line = getToken(0).beginLine; column = getToken(0).beginColumn; } < NAME > Test() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) (< ELSEIF > Test() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()))* [< ELSE > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())]

  {
    error_printmessage("Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}

void ERROR_WhileStmt()       :
{}
{
  { int line = -1; int column = -1; }
  { line = getToken(0).beginLine; column = getToken(0).beginColumn; } < NAME > Test() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) [< ELSE > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())]

  {
    error_printmessage("Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}

void ERROR_DoStmt()       :
{}
{
  { int line = -1; int column = -1; }
  { line = getToken(1).beginLine; column = getToken(1).beginColumn; } < NAME > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) < WHILE > Test()

  {
    error_printmessage("Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}

void ERROR_ForStmt1()       :
{}
{
  { int line = -1; int column = -1; }
  { line = getToken(1).beginLine; column = getToken(1).beginColumn; } < NAME > Exprlist() < IN > Testlist() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) [< ELSE > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())]

  {
    error_printmessage("Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}

void ERROR_ForStmt2()       :
{}
{
  { int line = -1; int column = -1; }
  "for" Exprlist() { line = getToken(1).beginLine; column = getToken(1).beginColumn; } < NAME > Testlist() (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite()) [< ELSE > (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())]

  {
    error_printmessage("Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}

void ERROR_Suite()       :
{}
{
  { int line = -1; int column = -1; }
  ((({ line = getToken(0).beginLine; column = getToken(0).beginColumn; } (Stmt())+ < CLOSEBRACE >)) (LOOKAHEAD(2) < NEWLINE >)*)

  {
    error_printmessage("Suite Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}

void ERROR_FuncDef()       :
{}
{
  { int line = -1; int column = -1; }
  { line = getToken(1).beginLine; column = getToken(1).beginColumn; } < NAME > < NAME > Parameters() ["->" Test()] (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())

  {
    error_printmessage("Function Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}

void ERROR_ClassDef()       :
{}
{
  { int line = -1; int column = -1; }
  (Modifier())* { line = getToken(1).beginLine; column = getToken(1).beginColumn; } < NAME > < NAME > [< COLON> ClassName()] [< FOLLOWS > InterfaceName() (< COMMA > InterfaceName())*] (LOOKAHEAD(2) < NEWLINE >)* (ClassSuite() | ERROR_ClassSuite())
  {
    error_printmessage("Class or Interface Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}

void ERROR_ClassSuite()       :
{}
{
  { int line = -1; int column = -1; }
  ({ line = getToken(0).beginLine; column = getToken(0).beginColumn; } (ClassStmt())* < CLOSEBRACE >)

  {
    error_printmessage("ClassSuite Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}

void ERROR_MethodDef()       :
{}
{
  { int line = -1; int column = -1; }
  { line = getToken(1).beginLine; column = getToken(1).beginColumn; } < NAME > (Modifier())* < NAME > Parameters() ["->" Test()] (LOOKAHEAD(2) < NEWLINE >)* (Suite() | ERROR_Suite())

  {
    error_printmessage("Method Definition Error\nLine: " + line + ". Column: " + column);
    //throw new ParseException();
  }
}




TOKEN :
{
  < NAME : ["a"-"z", "A"-"Z", "$", "_"] (["a"-"z", "A"-"Z", "0"-"9", "$", "_"])* >
| < NEWLINE : "\n" | "\r" >
| < STRING : ("\"" (~["\n", "\r"])* "\"") | ("\'" (~["\n", "\r"])* "\'") >
}

TOKEN :
{
  < NUMBER : < FLOAT > | < INT > >
| < INT : (["1"-"9"] (["0"-"9"])*) | ("0") >
| < FLOAT : ["1"-"9"] (["0"-"9"])* "." (["0"-"9"])+ >
}


JAVACODE
void error_printmessage(String s) {/*@bgen(jjtree) error_printmessage */
SimpleNode jjtn000 = new SimpleNode(JJTERROR_PRINTMESSAGE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {
/*@egen*/
  System.out.println("\n---------- EXCEPTION ENCOUNTERED ----------");
  System.out.println(s);
  System.out.println("\n");/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}